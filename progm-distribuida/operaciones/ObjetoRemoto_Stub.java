// Stub class generated by rmic, do not edit.
// Contents subject to change without notice.

public final class ObjetoRemoto_Stub
    extends java.rmi.server.RemoteStub
    implements IObjetoRemoto, java.rmi.Remote
{
    private static final long serialVersionUID = 2;
    
    private static java.lang.reflect.Method $method_division_0;
    private static java.lang.reflect.Method $method_multiplicacion_1;
    private static java.lang.reflect.Method $method_resta_2;
    private static java.lang.reflect.Method $method_suma_3;
    
    static {
	try {
	    $method_division_0 = IObjetoRemoto.class.getMethod("division", new java.lang.Class[] {double.class, double.class});
	    $method_multiplicacion_1 = IObjetoRemoto.class.getMethod("multiplicacion", new java.lang.Class[] {double.class, double.class});
	    $method_resta_2 = IObjetoRemoto.class.getMethod("resta", new java.lang.Class[] {double.class, double.class});
	    $method_suma_3 = IObjetoRemoto.class.getMethod("suma", new java.lang.Class[] {double.class, double.class});
	} catch (java.lang.NoSuchMethodException e) {
	    throw new java.lang.NoSuchMethodError(
		"stub class initialization failed");
	}
    }
    
    // constructors
    public ObjetoRemoto_Stub(java.rmi.server.RemoteRef ref) {
	super(ref);
    }
    
    // methods from remote interfaces
    
    // implementation of division(double, double)
    public double division(double $param_double_1, double $param_double_2)
	throws java.rmi.RemoteException
    {
	try {
	    Object $result = ref.invoke(this, $method_division_0, new java.lang.Object[] {new java.lang.Double($param_double_1), new java.lang.Double($param_double_2)}, 7155585005049925838L);
	    return ((java.lang.Double) $result).doubleValue();
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of multiplicacion(double, double)
    public double multiplicacion(double $param_double_1, double $param_double_2)
	throws java.rmi.RemoteException
    {
	try {
	    Object $result = ref.invoke(this, $method_multiplicacion_1, new java.lang.Object[] {new java.lang.Double($param_double_1), new java.lang.Double($param_double_2)}, -1662283761042352568L);
	    return ((java.lang.Double) $result).doubleValue();
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of resta(double, double)
    public double resta(double $param_double_1, double $param_double_2)
	throws java.rmi.RemoteException
    {
	try {
	    Object $result = ref.invoke(this, $method_resta_2, new java.lang.Object[] {new java.lang.Double($param_double_1), new java.lang.Double($param_double_2)}, 2273774405627412631L);
	    return ((java.lang.Double) $result).doubleValue();
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of suma(double, double)
    public double suma(double $param_double_1, double $param_double_2)
	throws java.rmi.RemoteException
    {
	try {
	    Object $result = ref.invoke(this, $method_suma_3, new java.lang.Object[] {new java.lang.Double($param_double_1), new java.lang.Double($param_double_2)}, 2531012047177527609L);
	    return ((java.lang.Double) $result).doubleValue();
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
}
